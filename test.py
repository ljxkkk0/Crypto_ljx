"""
#SM4_CBC测试
from Private_Key_Cipher import SM4
SM4en=SM4.new(op='encrypt',key='4046fb1985d94a7f1ff55ec7ec5f6054',mode=SM4.SM4_CBC,Iv='a8638d2fb23cc49206edd7c84532eaab')
msg=b'\xc0J\x9b1\x1a/\xc2E\xf7B\xc5q\x9f\xcf$\x9d'+b'\xc0J\x9b1\x1a/\xc2E\xf7B\xc5q\x9f\xcf$\x9d'
cipher=SM4en.encrypt(msg)
print(cipher)
'''
cipher=b'\xcb\xddV\x06B\x91\xb4j\x9b\xe2%\xc0\xd7^\\oF\xb6\xab\x91\xf2et\xb2bF\xe7W\x9e\xc2wb\xffsv\xa4\x83\xeb\xb3\x90\x95\xe8Z9\xa9?:\x99'
'''

SM4de=SM4.new(op='decrypt',key='4046fb1985d94a7f1ff55ec7ec5f6054',mode=SM4.SM4_CBC,Iv='a8638d2fb23cc49206edd7c84532eaab')
msg=SM4de.decrypt(cipher)
print(msg)
'''
msg=b'\xc0J\x9b1\x1a/\xc2E\xf7B\xc5q\x9f\xcf$\x9d\xc0J\x9b1\x1a/\xc2E\xf7B\xc5q\x9f\xcf$\x9d'
'''

"""

#SM3测试
'''
from Hash import SM3
words='this is the first SM3 testcase.'.encode('utf-8')
SM3demo=SM3.SM3(words)
print(SM3demo.hexdigest())
#输出：0x1c7d1fcf91f37a2ecb8877b5896d3474010784a75cdb1d392375029c4469e653
print(SM3demo.digest())
#输出：b'\x1c}\x1f\xcf\x91\xf3z.\xcb\x88w\xb5\x89m4t\x01\x07\x84\xa7\\\xdb\x1d9#u\x02\x9cDi\xe6S'
Hash=SM3demo.file_hash('D:\download\C2-Solution.pdf')
print(Hash)
#输出：0x8781fd10893306c98813b31d0e9be3e035d0c9abb54ac7ec542485eb9fba9e0b

'''

#SM2测试
"""
a = 115792089210356248756420345214020892766250353991924191454421193933289684991996
b = 18505919022281880113072981827955639221458448578012075254857346196103069175443
p = 115792089210356248756420345214020892766250353991924191454421193933289684991999
g = [22963146547237050559479531362550074578802567295341616970375194840604139615431,
     85132369209828568825618990617112496413088388631904505083283536607588877201568]  # 基点
m = [62220385967324995556943859594383843316990201421105076884209933343560809233015,
     9063699494246492215875763452283052636231938003241827298178711426179690419737]  # 明文点
n = 62850942488285990642567364045064888609861641279362042129880709558414313  # 基点的阶

from Public_Key_Cipher import SM2
SM2demo=SM2.new(a,b,p,g,n)
plaintext=b'123456789'
cipher=SM2demo.encrypt(plaintext)
print(cipher)
#输出：0x04af649749295ee1f0c9f19f29f38947fe2a1207e5cf567ba0e3a6842a64d88856a928bda06f28e37e0aa68ac93bc258865975dd383cd7dea9062ecb43227c10834ae392436a9f6c5f70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000029227e965c72b06de2610f4c56e8e981635c856b245bdca9c76884a1fa1514fe
plain=SM2demo.decrypt(str(cipher))
print(plain)
#输出：b'123456789'
print(plain==plaintext)
#输出：True
"""

#SM2签名
'''
from Signature import SM2_signature
#椭圆曲线参数
prime=60275702009245096385686171515219896416297121499402250955537857683885541941187
a=54492052985589574080443685629857027481671841726313362585597978545915325572248
b=45183185393608134601425506985501881231876135519103376096391853873370470098074
G=[29905514254078361236418469080477708234343499662916671209092838329800180225085,2940593737975541915790390447892157254280677083040126061230851964063234001314]
n=60275702009245096385686171515219896415919644698453424055561665251330296281527#椭圆曲线的阶

#用户标识
ID='ALICE123@YAHOO.COM'.encode('utf-8')
#用户公钥
PK=[4927346340877997421592888003129352901369751434954921663604743238822873158794,56090775331359075302546016414740579914612192649583459645010750108260086900823]
#待签名消息
Message='message digest'.encode('utf-8')
#私钥
da=8387551947784012071400071471596312053542870740821494713120726177333060924003
#随机数
k=49165263701565432377505549247848435858362931747789390865593867043744446085487

sign=SM2_signature.new(Mode='Sign',a=a,b=b,prime=prime,G=G,n=n,ID=ID,Message=Message,Pk=PK,d=da,k=k)
print(sign)
#输出：(29375463689586694004441797766812698475573938256363780089425801847059442521553, 50558071754134037809738440507460307292654583241166284157895327241897986943975)
verify=SM2_signature.new(Mode='Verify',a=a,b=b,prime=prime,G=G,n=n,ID=ID,Message=Message,Pk=PK,d=da,k=k,r=sign[0],s=sign[1])
print(verify)
#输出：True
'''

#ECC_operators模块测试
'''
from Public_Key_Cipher import ECC_operators
a=115792089210356248756420345214020892766250353991924191454421193933289684991996
b=18505919022281880113072981827955639221458448578012075254857346196103069175443
p=115792089210356248756420345214020892766250353991924191454421193933289684991999
Point1 = [64901889550129866513443884082574452575157116031103742365434905633820925813192,
      84553412528427919723206133858954594911213526647800598970633596412071681640913]
Point2= [64901889550129866513443884082574452575157116031103742365434905633820925813192,
      84553412528427919723206133858954594911213526647800598970633596412071681640913]

Curve_demo=ECC_operators.Elliptic_Curve(a=a,b=b,p=p)

Point3=Curve_demo.add(Point2,Point1)
print(Point3)
#输出：[91829719240076595600910287219737299259627413891073174690491219092963035830325, 31474822276849859104123114646070976974921401394140157637420547181522913249875]
Point4=Curve_demo.minus(Point1,Point2)
print(Point4)
#输出：[0, 0]
Point5=Curve_demo.multiply(Point1,125)
print(Point5)
#输出：[110117747631942453047618233423268750303736666185363479400181203180365983524117, 50029238751735848722678415529260555812010873439122287474234503373685614699938]
print(Curve_demo.check_point(Point1))
#输出：True
'''